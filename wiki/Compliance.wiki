#summary Compliance with the C++ Standard Library
#labels Featured,Phase-Requirements

<wiki:toc max_depth="10" />

= 17.4.1.3 Freestanding implementations =

2 A freestanding implementation has an implementation-defined set of headers. This set shall include at least the following
headers:
||18.1 Types ||`<cstddef>`||
||18.2 Implementation properties ||`<limits>`||
||18.4 Start and termination ||`<cstdlib>`||
||18.5 Dynamic memory management ||`<new>`||
||18.6 Type identification ||`<typeinfo>`||
||18.7 Exception handling ||`<exception>`||
||18.9 Other runtime support ||`<cstdarg>`||

3 The supplied version of the header <cstdlib> shall declare at least the functions `abort()`, `atexit()`, and `exit()`.
----

==C++ Features requiring runtime support==
 # `try`/`catch` works even in kernel mode with a few limitations ([http://code.google.com/p/ontl/source/browse/branches/x64/ntl/rtl/ehsup.asm ehsup.asm], [http://code.google.com/p/ontl/source/browse/branches/x64/ntl/rtl/safeseh.asm safeseh.asm], [http://code.google.com/p/ontl/source/browse/branches/x64/ntl/rtl/eh.cpp eh.cpp]).
 # Runtime type info and `dynamic_cast<>` ([http://code.google.com/p/ontl/source/browse/branches/x64/ntl/rtl/rtti.cpp rtti.cpp]).
 # Static object ctors/dtors support ([http://code.google.com/p/ontl/source/browse/branches/x64/ntl/rtl/crt.cpp crt.cpp]).
 # I/O Streams support (crt.cpp, [http://code.google.com/p/ontl/source/browse/branches/x64/ntl/rtl/iostream.cpp iostream.cpp]; [http://code.google.com/p/ontl/source/browse/branches/x64/ntl/rtl/wchar_mask_data.cpp wchar_mask_data.cpp] for `wchar_t` specializations).
 # `thread_local` not supported yet.
 # floats - FPU flags not compatible to Standard.

To enable various runtime features, include corresponding [http://code.google.com/p/ontl/source/browse/branches/x64/ntl/rtl/ ntl/rtl/*] files in the build list or project file.



==C++ Library Headers (ยง17.6.2.3/6) ==
Note that *[http://code.google.com/p/ontl/source/browse/trunk/ntl/ trunk/ntl]* codebase is *not supported* and deprecated, it will be *replaced with the [http://code.google.com/p/ontl/source/browse/branches/x64/ branches/x64] branch*.

|| # || <algorithm>             || About 45%.||
|| # || <array>                 || Complete. ||
|| # || <atomic>                || No 64bit types support in x86, not conforming the N3000 ||
|| # || <bitset>                || Complete. ||
|| # || <chrono>                || Complete. ||
|| # || <codecvt>               || Work in progress ||
|| # || <condition_variable>    || ||
|| # || <complex>               || Not planned in the near future. ||
|| # || <deque>                 || Complete. ||
|| # || <exception>             || Complete. ||
|| # || <forward_list>          || tested; incomplete (no `sort()`) ||
|| # || <fstream>               || Almost complete (no seekpos) ||
|| # || <functional>            || almost complete, but arguments count are limited (in development) ||
|| # || <future>                || Not confirming the N3000 ||
|| # || <initializer_list>      || No compilers to support it (except GCC 4.4+). ||
|| # || <iomanip>               || Complete. ||
|| # || <ios>                   || No `ios_base` callbacks. ||
|| # || <iosfwd>                || Complete. ||
|| # || <iostream>              || Complete for console io. ||
|| # || <istream>               || Almost complete (no FP). ||
|| # || <iterator>              || Complete. ||
|| # || <limits>                || Complete except of `numeric_limits<long double>::infinity()` & Co for ICC (10 bytes in size). ||
|| # || <list>                  || No `splice`, `merge`. Redesign is planned to trade O(n) `size()`. ||
|| # || <locale>                || Only "C" locale (no time, collate, messages and w/o locale mixins) ||
|| # || <map>                   || As RB tree now; untested ||
|| # || <memory>                || Incomplete (no `scoped_allocator`). ||
|| # || <mutex>                 || Complete (see `functional` for `call_once`) ||
|| # || <new>                   || Complete. ||
|| # || <numeric>               || Only `std::accumulate`. ||
|| # || <ostream>               || Almost complete (no FP). ||
|| # || <queue>                 || No `priority_queue`. ||
|| # || <random>                || ||
|| # || <ratio>                 || Complete. ||
|| # || <regex>                 || ||
|| # || <set>                   || Complete. ||
|| # || <sstream>               || Complete. ||
|| # || <stack>                 || Complete, but on top of `vector`. ||
|| # || <stdexcept>             || Complete. ||
|| # || <streambuf>             || Complete. ||
|| # || <string>                || Complete. ||
|| # || <strstream>             || Complete. ||
|| # || <system_error>          || Complete. ||
|| # || <threads>               || Complete (see `functional`) ||
|| # || <tuple>                 || Complete; limited type count. ||
|| # || <typeinfo>              || Complete. ||
|| # || <typeindex>             || Complete. ||
|| # || <type_traits>           || Almost complete (N2723) (no `is_standard_layout` for MSVC & ICC). ||
|| # || <unordered_map>         || Complete, untested. ||
|| # || <unordered_set>         || Complete, untested. ||
|| # || <utility>               || Complete. ||
|| # || <valarray>              || Not planned in near future. ||
|| # || <vector>                || Note about stl-exception-safety branch. ||

==C++ Headers for C Library Facilities (ยง17.6.2.3/7)==
|| # || <cassert>   || Complete. ||
|| # || <ccomplex>  || Not planned. ||
|| # || <cctype>    || ||
|| # || <cerrno>    || Not planned. ||
|| # || <cfenv>     || ||
|| # || <cfloat>    || Complete. But no runtime support for floats yet. ||
|| # || <cinttypes> || Complete. ||
|| # || <ciso646>   || Dummy header. ||
|| # || <climits>   || Complete. ||
|| # || <clocale>   || Not planned. ||
|| # || <cmath>     || Not planned. ||
|| # || <csetjmp>   || Not planned. ||
|| # || <csignal>   || Not planned. ||
|| # || <cstdarg>   || Complete. ||
|| # || <cstdbool>  || Dummy header. ||
|| # || <cstddef>   || No `NULL` macro, use `nullptr` instead. ||
|| # || <cstdio>    || Incomplete. ||
|| # || <cstdint>   || Complete. ||
|| # || <cstdlib>   || `FILE` supports only binary mode. `atexit` in x64 branch only. No buffer-overflowing stuff included. ||
|| # || <cstring>   || No `strdup`. ||
|| # || <ctgmath>   || None as ccomplex. ||
|| # || <ctime>     || Incomplete. ||
|| # || <cuchar>    || Incomplete. ||
|| # || <cwchar>    || Incomplete. ||
|| # || <cwctype>   || Compliance ||


= Technical Report on C++ Library extensions =

== Technical Report 1 ==

[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf Draft]

The technical report describes extensions to the C++ standard library that is described in the International Standard for the C++ programming language. Almost all library components from it are moved to the C++0x Standard.

NTL contains following separate components, which are based on TR1:
|| # || 2.2 Smart pointers || [http://code.google.com/p/ontl/source/browse/branches/x64/ntl/stlx/ext/tr1/smart_ptr_tr1.hxx <tr1/smart_ptr.hxx>] ||


== Technical Report 2 ==

[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2034.htm C++0x Standard Library wishlist]

The TR2 was cancelled in '08 and not published, but you can find C++0x Library extensions in the wishlist.

NTL contains following separate components, which are based on TR2:
|| # || [http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1975.html Filesystem Library Proposal] || [http://code.google.com/p/ontl/source/browse/branches/x64/ntl/stlx/ext/tr2/filesystem.hxx <tr2/filesystem.hxx>] ||
|| # || [http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2101.html Hierarchical Data Structures] || planned ||
|| # || [http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2054.pdf Networking Library Proposal] || planned for KM, work in progress ||